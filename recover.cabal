cabal-version: 2.4

-- Initial package description 'recover.cabal' generated by 'cabal init'.
-- For further documentation, see http://haskell.org/cabal/users-guide/

-- The name of the package.
name:	recover

-- The package version.	See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- https://pvp.haskell.org
-- PVP summary:	+-+------- breaking API changes
--				| | +----- non-breaking API additions
--				| | | +--- code changes with no API change
version:		1.0.0.0

-- A short (one-line) description of the package.
synopsis:	A data type similar to Data.Validation that recovers from errors.

-- A longer description of the package.
-- description:

-- URL for the project homepage or repository.
homepage:	https://github.com/argent0/recover

-- A URL where users can report bugs.
-- bug-reports:

-- The license under which the package is released.
license:	BSD-3-Clause

-- The file containing the license text.
license-file:	LICENSE

-- The package author(s).
author:	Aner Lucero

-- An email address to which users can send suggestions, bug reports, and
-- patches.
maintainer:	4rgento@gmail.com

-- A copyright notice.
-- copyright:

category:	Data

description: 
	A data type similar to 'Data.Validation' that recovers from errors.
	.
	A @Recover e v@ contains a value @v@ or an error @e@ or both. This is
	similar to `Data.These`, but with a different `Applicative` instance.
	.
	Like `Data.Validation`, the `Applicative` instance of `Recover` enables the
	of validating various values while accumulating all the errors.
	.
	> Foo <$> (Success a) <*> (Success b) == Success (Foo a b)
	> Foo <$> (Failure e) <*> (Failure ee) == Failure (e <> ee)
	> Foo <$> (Success a) <*> (Failure ee) == Failure e
	.
	Unlike `Data.Validation`, `Recover` also has a constructor that represents
	the situation in which there were errors but a value could be nonetheless
	obtained. All errors are still accumulated.
	.
	> Foo <$> (Recover e a) <*> (Success b) = Recover e (Foo a b)
	> Foo <$> (Recover e a) <*> (Recover ee b) = Recover (e <> ee) (Foo a b)

-- Extra files to be distributed with the package, such as examples or a
-- README.
extra-source-files:	CHANGELOG.md

source-repository	head
	type:	git
	location: git@github.com:argent0/recover.git

library
	-- Modules exported by the library.
	exposed-modules: Data.Recover

	-- Modules included in this library but not exported.
	-- other-modules:

	-- LANGUAGE extensions used by modules in this package.
	-- other-extensions:

	-- Other library packages from which modules are imported.
	build-depends:	base ^>=4.12.0.0

	-- Directories containing source files.
	hs-source-dirs:	src

	-- Base language which the package is written in.
	default-language:	Haskell2010

	ghc-options: -Wall -Wno-tabs

